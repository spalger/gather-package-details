// combine the "node" objects output from the read-package-tree library
// with the license map generated by calling license-checker
export class Package {
  constructor(node, licenses, modulePaths) {
    this.name = node.package.name
    this.version = node.package.version
    this.directory = node.path
    this.licenses = licenses.forModule(this.name, this.version)

    // make the search depth first because:
    //
    //  1. child modules must claim module paths first
    //  so that a module path like "/node_modules/react/node_modules/leftpad/index.js"
    //  is properly attributed to "leftpad", not "react"
    //
    //  2. so that we can ignore child modules that don't
    //  match any module paths
    this.children = node.children.reduce((acc, childNode) => {
      const child = new Package(childNode, licenses, modulePaths)

      // only track children have matching module paths,
      // or children that have matching module paths
      if (child.reasons.length || child.children.length) {
        return acc.concat(child)
      }

      return acc
    }, [])

    this.reasons = modulePaths.claimByDir(this.directory)
  }
}
